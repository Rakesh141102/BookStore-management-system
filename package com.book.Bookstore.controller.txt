package com.book.Bookstore.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.book.Bookstore.model.Book;
import com.book.Bookstore.service.BookService;
import java.util.*;


@RestController
public class BookController{

	@Autowired
	BookService bookService;
	
	@GetMapping("/books")
	public List<Book> book(){
		return bookService.getAllBooks();
	}
	
	@GetMapping("/books/select/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable Long id) {
       Optional<Book> book = bookService.getBookById(id);
       return book.map(ResponseEntity::ok).orElseGet(()-> ResponseEntity.notFound().build());
    }
	
	@PostMapping("/books/create")
    public ResponseEntity<Book> createBook(@RequestBody Book book) {
        Book savedBook = bookService.saveBook(book);
        return ResponseEntity.status(HttpStatus.CREATED).body(savedBook);
    }
	
	@PutMapping("/books/update/{id}")
	public ResponseEntity<Book> updateBook(@PathVariable Long id, @RequestBody Book book){
		if(!bookService.getBookById(id).isPresent()) {
			return ResponseEntity.notFound().build();
		}
		book.setId(id);
	    Book  bookupdated = bookService.saveBook(book);
	    return ResponseEntity.ok(bookupdated);
	}
	
	@DeleteMapping("books/delete/{id}")
	public ResponseEntity<Void> deleteBook(@PathVariable Long id){
		if(!bookService.getBookById(id).isPresent()){
			return ResponseEntity.notFound().build();
		}
		bookService.deleteBooks(id);
		return ResponseEntity.noContent().build();
	}
}

